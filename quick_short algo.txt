quick sort and randmoised quick sort

This algorithm works by using a divide-and-conquer strategy to divide a single 
unsorted array into two smaller sub-arrays.

#######---algo-----------------------------------##
1. Select an element pivot from the array elements.
2. Rearrange the elements in the array in such a way that all elements that are less than the pivot 
appear before the pivot and all elements greater than the pivot element come after it (equal 
values can go either way). After such a partitioning, the pivot is placed in its final position. 
This is called the partition operation.
3. Recursively sort the two sub-arrays thus obtained. (One with sub-list of values smaller than 
that of the pivot element and the other having higher value elements.)
the main task is to find the pivot element, which will partition the array into two halves.
#########################################################

PARTITION (ARR, BEG, END, LOC)
	Step 1: [INITIALIZE] SET LEFT = BEG, RIGHT = END, LOC = BEG, FLAG = 0


	Step 2: Repeat Steps 3 to 6 while FLAG = 0


	Step 3: Repeat while ARR[LOC] <= ARR[RIGHT] AND LOC != RIGHT
			SET RIGHT = RIGHT-1
		[END OF LOOP]


	Step 4: IF LOC = RIGHT
			SET FLAG=1
		ELSE IF ARR[LOC] > ARR[RIGHT]
			SWAP ARR[LOC] with ARR[RIGHT]
			SET LOC = RIGHT
		[END OF IF]


	Step 5: IF FLAG = 0
			Repeat while ARR[LOC] >= ARR[LEFT] AND LOC != LEFT
			SET LEFT = LEFT+1
			[END OF LOOP]


	Step 6: 	IF LOC = LEFT
				SET FLAG=1
			ELSE IF ARR[LOC] < ARR[LEFT]
				SWAP ARR[LOC] with ARR[LEFT]
				SET LOC = LEFT
			[END OF IF]
		[END OF IF]


	Step 7: [END OF LOOP]

	Step 8: END


QUICK_SORT (ARR, BEG, END)
Step 1: IF (BEG < END)
	CALL PARTITION (ARR, BEG, END, LOC)    
	CALL QUICKSORT(ARR, BEG, LOC-1)
	CALL QUICKSORT(ARR, LOC+1, END)
	[END OF IF]
Step 2: END

##################################################################################################################
time complexity
-> if alreasy sorted then O(n^2) {worst performance}
-> best case O(nlog(n))

quick_sort(a,b,e)	 best case 		worstcase
1-> partition(a,b,e,p) ->  O(n)			 o(n)
2-> qiuck_sort(a,b,p-1) -> T(n/2) 		 T(n-1)
3-> quick_sort(a,p+1,e)->  T(n/2)		 T(1)

best case -> T(n) = 2*T(n/2) + f(n)
		T(n) = O(nlog(n)) by masters theorem

worst case -> T(n) = T(n-1) + T(1) + f(n)
		T(n) = O(n^2) by substitution method 


###########################################################################################################################

randomised quick sort
as we see tthe time complexity increases when the array is already sorted so here comes randomised quick sort


-> In this we choses the pivot element at random with the help of randomised function,
   so the pivot element is random which increses the efficency in the case of already sorted array
but in this sort also the worst case time complexity remains the same only the chances of sorted pivot is decresed 

